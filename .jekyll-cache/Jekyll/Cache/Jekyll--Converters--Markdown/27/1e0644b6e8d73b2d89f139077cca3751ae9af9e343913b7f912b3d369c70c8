I"þ<h1 id="unicode-art">Unicode Art</h1>
<hr />

<p>Ascii art is a popular way of recreating images out of characters. I havenâ€™t seen it made out of Chinese characters, even though they work well for this purpose. This is some annotated Mathematica code on how to do this.</p>

<p>First, we need the unicode ids of the characters we are interested in using:</p>

<figure class="highlight"><pre><code class="language-mathematica" data-lang="mathematica"><span class="w">    </span><span class="nv">characters</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">FromCharacterCode</span><span class="w"> </span><span class="o">/@</span><span class="w"> </span><span class="nb">Range</span><span class="p">[</span><span class="m">19968</span><span class="o">,</span><span class="w"> </span><span class="m">19968</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">2000</span><span class="p">]</span></code></pre></figure>

<p>For each id, we need to get an idea for how light that idâ€™s character is on a scale from 0 to 1. First make a function that counts the number of black pixels and then apply this to all the characters and normalize the results.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">   
   <span class="n">lightness</span> <span class="o">=</span> 
        <span class="no">Total</span> <span class="err">@</span><span class="o">*</span>
        <span class="no">Flatten</span> <span class="err">@</span><span class="o">*</span>
        <span class="no">ImageData</span> <span class="err">@</span><span class="o">*</span>
        <span class="p">(</span><span class="no">Rasterize</span><span class="p">[</span><span class="c1">#, RasterSize -&gt; {13, 16}] &amp;)</span>
 
    <span class="n">lightnessTable</span> <span class="o">=</span> 
        <span class="no">Rescale</span><span class="p">[</span><span class="c1">#, {Min@#, Max@#}]&amp;@ </span>
        <span class="no">ParallelMap</span><span class="p">[</span><span class="n">lightness</span><span class="p">,</span> <span class="n">ids</span><span class="p">]</span></code></pre></figure>

<p>Then we make a function that takes a darkness specification from 0 to 1 and returns the unicode character index of an appropriate character. There are more efficient ways of doing this of course and it doesnâ€™t need to be very precise to have the wanted effect:</p>

<p><code class="Mathematica">    
   intensityToCharacter = 
        First @*
        Nearest[Thread[lightnessTable -&gt; characters]]
</code></p>

<p>This code make a small sized grayscale image from an example image built into Mathematica:</p>

<p><code class="Mathematica">
    exampleImage = 
        ColorConvert[#, "GrayScale"]&amp; @
        ImageResize[#, 100]&amp; @
        ExampleData[{"TestImage", "Mandrill"}]
</code></p>

<p>For each pixel, we get the corresponding Chinese Character and put it in a grid:</p>

<p><code class="Mathematica">
    GraphicsGrid@
        Map[intensityToCharacter, ImageData@exampleImage, {2}]
</code></p>

<p>This can be manually resized and rasterized. Getting the parameters correct in practice requires some trial and error:</p>

<p><img class="pure-img" src="http://localhost:4000/assets/chineseCharacterTest.png" /></p>

:ET